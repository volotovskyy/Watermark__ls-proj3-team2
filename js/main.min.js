var globalParameters = {
    //mainContainer: $('.work__workplace'),
    //watermarkContainer: $('.work__img'),

    mainContainer: $('.work__img-block'),
    watermarkContainer: $('.work__watermark-block'),
    watermarkWrapperClass: 'work__watermark-wrapper',

    mainImageInput: $('#main_img'),
    mainImageInputWrapper: $('#main_img_name'),

    watermarkImageInput: $('#watermark'),
    watermarkImageInputWrapper: $('#watermark-name'),

    classMainImage: 'main-image',
    classWatermarkImage: 'watermark-image',

    buttonResetId: $('#reset'),
    buttonSubmit: $('#submit'),
    buttonGridMode: $('#tessel'),
    buttonSingleMode: $('#location'),

    gridClass: '.position__point',

    singleMode: 'single-mode',
    gridMode: 'grid-mode',

    controlPanel: {

        spiners: {
            $xu: $('#upX'),
            $xd: $('#downX'),
            $yu: $('#upY'),
            $yd: $('#downY'),

            $wu: $('#UpVertical'),
            $wd: $('#DownVertical'),
            $hu: $('#upHorizontal'),
            $hd: $('#downHorizontal')
        },

        inputs: {
            $x: $('#moveX'),
            $y: $('#moveY'),
            $px: $('#vertical'),
            $py: $('#horizontal'),
        }
    },

    defaults: {
        transparency: 50,        // persents
        position: [10, 10],
        gridPadding:[18,19]
    },

    url: 'php/watermark.php'
};
var Base = (function () {
    var settings = {
            window: {
                size: null
            },

            image: {
                originalSize: {
                    width: 0,
                    height: 0
                },
                scaleSize: {
                    width: 0,
                    height: 0
                }
            },

            scale: 1,

            watermark: {
                originalSize: {
                    width: 0,
                    height: 0
                },
                scaleSize: {
                    width: 0,
                    height: 0
                }
            },

            wrapper: {
                size: {
                    width: 0,
                    height: 0
                },
                position: {
                    left: 0,
                    top: 0
                }
            },

            grid: {
                size: {
                    width: 0,
                    height: 0
                },

                position: {
                    left: 0,
                    top: 0
                },

                padding: {
                    left: globalParameters.defaults.gridPadding[0],
                    top: globalParameters.defaults.gridPadding[1]
                }
            },

            single: {
                position: {
                    left: 0,
                    top: 0
                }
            },

            mode: globalParameters.singleMode
        },

        $reset = globalParameters.buttonResetId,
        $buttonGrid = globalParameters.buttonGridMode,
        $buttonSingle = globalParameters.buttonSingleMode,
        $mainContainer = globalParameters.mainContainer;

    function _initModules() {
        Images.init();
        Position.init();
        Slider.init();
        Spiners.init();
        Inputs.init();
        Grid.init();
    }

    function _eventListener() {
        $reset.on('click', _setDefault);
        $buttonGrid.on('click', _clickMode);
        $buttonSingle.on('click', _clickMode);
    }

    function _clickMode(e) {
        var $this = $(this);
        e.preventDefault();

        settings.mode = $this.attr('data-view');
        $('.position__btns').removeClass('active');
        $this.addClass('active');

        Images.refresh(settings.mode);
    }

    function _setDefault(e) {
        e.preventDefault();

        var
            pos = globalParameters.defaults.position,
            padding = globalParameters.defaults.gridPadding,
            transparency = globalParameters.defaults.transparency;

        Position.set(pos);
        Position.paddingSet(padding);


        Slider.set(transparency);
    }

    function _setSettings() {
        settings.window.size = {
            width: $mainContainer.width(),
            height: $mainContainer.height()
        };
    }

    return {
        init: function () {
            _initModules();
            _eventListener();
            _setSettings();
        },

        //event: event,
        settings: settings
    }
}());
var Grid = (function () {
    var class_ = globalParameters.gridClass,
        sizeGrid = {
            col:    3,
            row:    3
        },
        $activePoint = null;

    function _setSizeGrid (size){
        if(size != undefined && size[0] !== undefined)sizeGrid.col = size[0];
        if(size != undefined && size[1] !== undefined)sizeGrid.row = size[1];
    };

    function _eventListener () {
        $(class_).on('click', _click);
    };

    function _click (e) {
        var $this = $(this),
            index = $this.index(),
            centerBlockPosition = _getCenterPositionBlockByIndex(index),
            pos = _watermarkCenterByPosition(centerBlockPosition);

        Position.set(pos);
        setNoActivePoints();
        $this.addClass('active');
        $activePoint = $this;
    };

    function _getCenterPositionBlockByIndex (index) {
        var size = Images.getSizeMainImage(),
            block = {
                width: parseInt(size.width) / sizeGrid.col,
                height: parseInt(size.height) / sizeGrid.row,
            },
            hCountBlock = index / sizeGrid.col >> 0, // ����� ����� � �������
            wCountBlock = index % sizeGrid.col;      // ����� ����� � ������

        return [
            block.width / 2 + block.width * wCountBlock,
            block.height / 2 + block.height * hCountBlock
        ];
    }

    function _watermarkCenterByPosition (pos){
        var size = Images.getSizeWatermark();

        return [
            pos[0] - parseInt(size.width)/2,
            pos[1] - parseInt(size.height)/2
        ]
    }

    function setNoActivePoints(){
        if($activePoint){
            $activePoint.removeClass('active');
            $activePoint = null;
        }
    }
    return {
        init: function (sizeGrid) {
            _eventListener();
            _setSizeGrid(sizeGrid);
        },

        setNoActivePoints: setNoActivePoints
    }
}());

var Images = (function () {
    var
        $imageName = globalParameters.mainImageInputWrapper,
        $watermarkName = globalParameters.watermarkImageInputWrapper,

        $inputImage1 = globalParameters.mainImageInput,
        $inputImage2 = globalParameters.watermarkImageInput,

        $reset = globalParameters.buttonResetId,
        $submit = globalParameters.buttonSubmit,

        class_ = globalParameters.classWatermarkImage,

        img1,
        img2,
        SINGLE_MODE = globalParameters.singleMode,

        watermarkImage,
        $wrapper;


    // -------- performed once
    var _firstSelection = function () {
        $submit.prop('disabled', false);
        $reset.prop('disabled', false);
        $('.panel').hide();

        _firstSelection = function () {
        };
    };
    var _inputWatermarkEnable = function () {
        var
            input = globalParameters.watermarkImageInput,
            wrapper = globalParameters.watermarkImageInputWrapper;

        input.prop('disabled', false);
        wrapper.prop('disabled', false);
        $('.form__watermark-input-disabled').hide();

        _inputWatermarkEnable = function () {
        };
    };

    // --------


    function _eventListener() {
        $inputImage1.on('change', _loadMainImage);
        $inputImage2.on('change', _loadWatermark);

        $submit.on('click', _upload);
    }

    function _changeFileUploadImage() {
        var filepath = $inputImage1.val();

        filepath = filepath.replace(/c:\\fakepath\\/gmi, "");
        $imageName.val(filepath);
    }

    function _changeFileUploadWatermark() {
        var filepath = $inputImage2.val();

        filepath = filepath.replace(/c:\\fakepath\\/gmi, "");
        $watermarkName.val(filepath)
    }

    function _loadImg(e, callback) {
        if (window.File && window.FileReader && window.FileList && window.Blob) {
            var file = e.target.files[0];

            if (!file.type.match('image.*')) {
                alert('Ошибка. Только изображения!');
                //TODO type error message
                return;
            }

            var reader = new FileReader();

            reader.onload = (function (f) {
                return callback;
            })(file);

            reader.readAsDataURL(file);
        } else {
            alert('The File APIs are not fully supported in this browser.');
            //TODO  exit message
        }
    }


    function _setBackGround(image, $contaitener, class_) {
        var
            url = 'url(' + image + ')';

        Scale.mainImage(image, function () {
            $contaitener.css('background-image', url);

            if (watermarkImage)_setImageWatermark();

            Position.refresh();
            _inputWatermarkEnable();

        });
    }

    function _insertWatermark() {
        var $img;

        $wrapper
            .find('.' + class_)
            .remove();

        if (Base.settings.mode == SINGLE_MODE) {
            $img = $('<img class="' + class_ + '">');
            $wrapper.append($img)
                .width('auto')
                .height('auto');
            $wrapper.draggable('option', 'containment', 'parent');
        } else {
            $wrapper.draggable('option', 'containment', '');
            $img = _setGridMode();
        }

        $img.attr('src', watermarkImage);

        _setWatermarkSettings($img);

        return $img;
    }

    function _setImageWatermark() {
        Scale.watermark(watermarkImage, function () {
            _insertWatermark();
            _firstSelection();
        });
    }

    function _setGridMode() {
        var img = '<img class="' + class_ + '">',
            widthW = Base.settings.wrapper.size.width,
            heightW = Base.settings.wrapper.size.height,

            widthI = Base.settings.watermark.scaleSize.width,
            heightI = Base.settings.watermark.scaleSize.height,

            countW = Math.ceil(widthW / widthI),
            countH = Math.ceil(heightW / heightI),

            paddingTop = Base.settings.grid.padding.top,
            paddingLeft = Base.settings.grid.padding.left,

            width = Base.settings.grid.size.width = (widthI + paddingLeft) * countW,
            height = Base.settings.grid.size.height = (heightI + paddingTop) * countH
            ;

        $wrapper.width(width);
        $wrapper.height(height);

        for (i = 0, end = countH * countW; i < end; i++) {
            $img = $(img);

            $img.css({
                'margin-left': paddingLeft,
                'margin-top': paddingTop
            });

            $wrapper.append($img);
        }
        Inputs.paddingSet([paddingLeft,paddingTop]);
        return $('.' + class_);
    }

    function _setWatermarkSettings($img) {
        Transparency.init($img);
        Scale.refresh($img);
    }

    function _addDragAndDrop($block) {
        $block.draggable({
            drag: function (e, drag) {
                Position.set([drag.position.left, drag.position.top]);
            },
            cursor: 'move',
            containment: 'parent'
        });
    }


    function _loadMainImage(e) {
        _loadImg(e, _ajaxMainImage);
        _changeFileUploadImage();
    }

    function _loadWatermark(e) {
        _loadImg(e, _ajaxWatermark);
        _changeFileUploadWatermark();
    }

    function _ajaxMainImage(){
        var fd = new FormData;

        fd.append('img', $inputImage1.prop('files')[0]);

        $.ajax({
            url: 'php/image_load.php',
            data: fd,
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (data) {
                if(data.status === 'ok'){
                    _setBackGround(data.result, globalParameters.mainContainer, globalParameters.classMainImage);
                    img1 = data.result;
                } else {
                    alert(data.message);
                }
            },
            error: function (e) {
                console.log('error');
                console.log(e);
            }
        })
    }

    //Подгрузка главного изображения
    function _ajaxWatermark(){
        var fd = new FormData;

        fd.append('img', $inputImage2.prop('files')[0]);

        $.ajax({
            url: 'php/image_load.php',
            data: fd,
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (data) {
                if(data.status === 'ok'){
                    watermarkImage = data.result;
                    _setImageWatermark();
                    img2 = data.result;
                } else {
                    alert(data.message);
                }
            },
            error: function (e) {
                console.log('error');
                console.log(e);
            }
        })
    }

    //Подгрузка знака
    function _upload(e) {
        e.preventDefault();
        var fd = new FormData,
            url = globalParameters.url,
            opacity = Slider.get(),
            position = Position.get(),
            x = Math.floor(position[0] * Base.settings.scale),
            y = Math.floor(position[1] * Base.settings.scale);

        if ($inputImage1.prop('files').length === 0 || $inputImage2.prop('files').length === 0) {
            alert('Сначала выберите изображение');
            //TODO print message
            return;
        }
        fd.append('img1', img1);
        fd.append('img2', img2);
        fd.append('opacity', opacity);
        fd.append('positionX', x);
        fd.append('positionY', y);
        fd.append('mode', Base.settings.mode);
        fd.append('paddingLeft', Base.settings.grid.padding.left);
        fd.append('paddingTop', Base.settings.grid.padding.top);

        $.ajax({
            url: url,
            data: fd,
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (data) {
                _save(data);
            },
            error: function (e) {
                console.log('error');
                console.log(e);
            }
        })
    }

    function _save(data) {
        //var url = 'http://dz3/' + url;
        var link = document.createElement('a');
        link.target = "_blank";
        link.download = "img.jpg";
        link.href = data.result;
        link.click();
    }

    return {

        init: function () {
            _eventListener();
            //$wrapper = $('.' + globalParameters.watermarkWrapperClass);
            $wrapper = $('.' + globalParameters.watermarkWrapperClass);
            _addDragAndDrop($wrapper);
        },

        getSizeMainImage: function () {
            return {
                width: Base.settings.wrapper.size.width,
                height: Base.settings.wrapper.size.height
            }
        },

        getSizeWatermark: function () {
            return {
                width: Base.settings.watermark.scaleSize.width,
                height: Base.settings.watermark.scaleSize.height
            }
        },

        refresh: function (mode) {
            var pos = Position.get();

            if (mode == SINGLE_MODE) {
                Base.settings.grid.position = {
                    left: pos[0],
                    top: pos[1]
                };
                Base.settings.wrapper.position = Base.settings.single.position;
                $('.switch').removeClass('switch-tessel');

            } else {
                Base.settings.single.position = {
                    left: pos[0],
                    top: pos[1]
                };
                Base.settings.wrapper.position = Base.settings.grid.position;

                $('.switch').addClass('switch-tessel');
            }

            _insertWatermark();
            Position.set([
                Base.settings.wrapper.position.left,
                Base.settings.wrapper.position.top
            ]);

        }
    }
}());
var Inputs = (function () {
    var
        $x = globalParameters.controlPanel.inputs.$x,
        $y = globalParameters.controlPanel.inputs.$y;
        $px = globalParameters.controlPanel.inputs.$px;
        $py = globalParameters.controlPanel.inputs.$py;

    var _eventListener = function () {

        $x.on('keyup',function(){
            var vals = [$x.val()];
            Position.set(vals);
        });

        $y.on('keyup',function(){
            var vals = [undefined, $y.val()];
            Position.set(vals);

        });
        $px.on('keyup',function(){
            var vals = [$px.val()];
            Position.paddingSet(vals);
        });

        $py.on('keyup',function(){
            var vals = [undefined, $py.val()];
            Position.paddingSet(vals);
        });

    };


    return {

        init: function () {
            this.set([0, 0]);
            _eventListener();
        },

        set: function (position) {
            if(position[0] !== undefined)$x.val(position[0]);
            if(position[1] !== undefined)$y.val(position[1]);
        },

        paddingSet: function(padding){
            if(padding[0] !== undefined)$px.val(padding[0]);
            if(padding[1] !== undefined)$py.val(padding[1]);
        }
    }
}());
var Position = (function () {
    var
        $imageWrapper = $('.' + globalParameters.watermarkWrapperClass),
        class_= globalParameters.classWatermarkImage,
        defPosition = globalParameters.defaults.position,

        SINGLE_MODE = globalParameters.singleMode,
        $container;

    var _getBorderPosition = function () {
        var $image = $imageWrapper,
            width = $image.width(),
            heigth = $image.height(),
            widthContainer = $container.width(),
            heightContainer = $container.height();

        return [
            widthContainer - width,
            heightContainer - heigth
        ]
    };

    var _validPosition = function (pos) {
        var borders = _getBorderPosition(),
            x = pos[0],
            y = pos[1];

        if (Base.settings.mode == SINGLE_MODE) {
            if (x !== undefined) {
                x = parseInt(x);
                x = x > borders[0] ? borders[0] : x;
                x = x > 0 ? x : 0;
            }

            if (y !== undefined) {
                y = parseInt(y);
                y = y > borders[1] ? borders[1] : y;
                y = y > 0 ? y : 0;
            }
        }

        return [x, y];
    };

    return {
        init: function () {
            $container = globalParameters.watermarkContainer;
        },

        setDefault: function () {
            this.set(defPosition[0], defPosition[1]);
        },

        set: function (pos) {

            var
                $image = $imageWrapper,
                position = $image.position();

            if (position === undefined) return;

            pos = _validPosition(pos);

            var x = pos[0],
                y = pos[1];

            if (x !== undefined) {
                $image.css('left', x);
            }
            if (y !== undefined) {
                $image.css('top', y);
            }

            if (Base.settings.mode == SINGLE_MODE) {
                Inputs.set(this.get());
            }

            Grid.setNoActivePoints();

        },

        add: function (pos) {
            var
                $image = $imageWrapper,
                addX = pos[0],
                addY = pos[1],
                position = $image.position();

            if (position === undefined) return;

            var
                x = parseInt(position.left),
                y = parseInt(position.top);

            if (addX)x += addX;
            if (addY)y += addY;

            this.set([x, y]);


        },

        refresh: function () {
            this.add([0, 0]);
        },

        get: function () {
            var
                $image = $imageWrapper,
                position = $image.position();

            return [position.left, position.top];
        },

        paddingSet: function (pos) {
            var
                l = Base.settings.grid.padding.left = parseInt(pos[0]),
                t = Base.settings.grid.padding.top = parseInt(pos[1]);


            $('.' + class_).css({
                'margin-left': l,
                'margin-top': t
            });

            $('.position__tessel-vertical').width(l);
            $('.position__tessel-horizontal').height(t);

            Inputs.paddingSet(pos);
        },

        paddingAdd: function (pos) {
            var
                l = Base.settings.grid.padding.left + parseInt(pos[0]),
                t = Base.settings.grid.padding.top + parseInt(pos[1]);

            this.paddingSet([l, t]);
        }
    }
}());
var Scale = (function () {
    var class_ = globalParameters.classWatermarkImage;
    function setScaleWaterMark(image, callback) {
        var img = new Image();

        img.onload = function () {
            Base.settings.watermark.originalSize.width = this.width;
            Base.settings.watermark.originalSize.height = this.height;

            scaleWatermark(callback);
        };

        img.src = image;
    }

    function setScaleWatermark($img){
        var
            width = Base.settings.watermark.scaleSize.width,
            height = Base.settings.watermark.scaleSize.height;

        $img = $img || $('.' + class_);

        $img.width(width);
        $img.height(height);
    }

    function scaleWatermark(callback){
        var
            $image = $('.' + globalParameters.classWatermarkImage),
            scale = Base.settings.scale,
            width = Base.settings.watermark.originalSize.width,
            height = Base.settings.watermark.originalSize.height;

        if(width > 0 && height > 0){
            Base.settings.watermark.scaleSize.width = Math.floor(width/scale);
            Base.settings.watermark.scaleSize.height = Math.floor(height/scale);

        }
        if(callback)callback();

        return this;
    }

    function _Scale(image, name, containerSize, callback) {
        var img = new Image();

        img.onload = function () {
            var width = this.width,
                height = this.height,
                scale = 1;


            if (containerSize.width < width || containerSize.height < height) {
                var scaleW = width / containerSize.width,
                    scaleH = height / containerSize.height;

                scale = scaleW > scaleH ? scaleW : scaleH;
            }

            Base.settings.scale = scale;
            var
                widthS = Math.floor(width / scale),
                heightS = Math.floor(height / scale);
            Base.settings[name].size.width = widthS;
            Base.settings[name].size.height = heightS;
            Base.settings[name].position.left = center(containerSize.width, widthS);
            Base.settings[name].position.top = center(containerSize.height, heightS);

            callback(Base.settings[name]);
        };

        img.src = image;
    }


    function center(wrapp, inner) {
        return Math.floor((wrapp - inner) / 2);
    }

    function setScaleMainImage(image, callback) {
        var
            $watermarkContainer = globalParameters.watermarkContainer,
            $mainContainer = globalParameters.mainContainer,
            name = 'wrapper';

        _Scale(image, name, Base.settings.window.size, function (image) {
            var
                size = image.size,
                bs = size.width + 'px ' + size.height + 'px';

            $mainContainer.css('background-size', bs);

            $watermarkContainer.width(size.width);
            $watermarkContainer.height(size.height);
            $watermarkContainer.css('left', image.position.left);
            $watermarkContainer.css('top', image.position.top);

            callback();
        });

    }


    return {
        mainImage: setScaleMainImage,
        watermark: setScaleWaterMark,
        scaleWatermark: scaleWatermark,
        refresh:setScaleWatermark
    }
}());
var Slider = (function () {
    var $slider;

    function _initPlugin() {
        $slider = $(".opacity__slider");

        $slider.slider({
            range: "min",
            value: globalParameters.defaults.transparency,
            min: 1,
            max: 100,
            change: change,
            slide: change
        });
    };

    function change(event, ui) {
        Transparency.set(ui.value);
    }

    return {
        init: function () {
            _initPlugin();
        },

        set: function (val) {
            $slider.slider('value', val);
        },

        get: function () {
            return $slider.slider('value');
        }
    }
}());
var Spiners = (function () {
    var
        $xu = globalParameters.controlPanel.spiners.$xu,
        $xd = globalParameters.controlPanel.spiners.$xd,
        $yu = globalParameters.controlPanel.spiners.$yu,
        $yd = globalParameters.controlPanel.spiners.$yd,

        $wu = globalParameters.controlPanel.spiners.$wu,
        $wd = globalParameters.controlPanel.spiners.$wd,
        $hd = globalParameters.controlPanel.spiners.$hd,
        $hu = globalParameters.controlPanel.spiners.$hu
        ;

    var _set = {};

    _set[globalParameters.singleMode] = function(vals){
        Position.add(vals);
    };

    _set[globalParameters.gridMode] = function(vals){
        Position.paddingAdd(vals);
    };

    var _eventListener = function () {

        $xu.on('click', function () {
            _set[Base.settings.mode]([1, 0]);
        });

        $xd.on('click', function () {
            _set[Base.settings.mode]([-1, 0]);
        });

        $yu.on('click', function () {
            _set[Base.settings.mode]([0, 1]);
        });

        $yd.on('click', function () {
            _set[Base.settings.mode]([0, -1]);
        });

        $wu.on('click', function () {
            _set[Base.settings.mode]([1, 0]);
        });

        $wd.on('click', function () {
            _set[Base.settings.mode]([-1, 0]);
        });

        $hu.on('click', function () {
            _set[Base.settings.mode]([0, 1]);
        });

        $hd.on('click', function () {
            _set[Base.settings.mode]([0, -1]);
        });
    };

    return {
        init: function () {
            _eventListener();
        }
    }
}());
var Transparency = (function () {
    var lastPercent = globalParameters.defaults.transparency,
        $img;

    var _setTransparency = function (percent) {
        if (percent === undefined)percent = lastPercent;

        var $image = $('.' + globalParameters.classWatermarkImage),
            opacity = percent / 100;

        $image.css('opacity',opacity);

        lastPercent = percent;
    };

    return {
        set: _setTransparency,
        init: function($image){
            $img = $image;
            _setTransparency();
        }
    }
}());


$(function () {
    Base.init();

});

