var globalParameters = {
    mainContainer:              $('.work__img-block'),
    watermarkContainer:         $('.work__watermark-block'),


    mainImageInput:             $('#main_img'),
    mainImageInputWrapper:      $('#main_img_name'),

    watermarkImageInput:        $('#watermark'),
    watermarkImageInputWrapper: $('#watermark-name'),

    classMainImage:             'main-image',
    classWatermarkImage:        'watermark-image',

    buttonReset:                $('#reset'),
    buttonSubmit:                $('#submit'),

    gridClass:                  '.position__point',

    controlPanel:{

        spiners:{
            $xu:                $('#upX'),
            $xd:                $('#downX'),
            $yu:                $('#upY'),
            $yd:                $('#downY')
        },

        inputs:{
            $x:                 $('#moveX'),
            $y:                 $('#moveY')
        }
    },

    defaults:   {
        transparency: 50,        // persents
        position:     [10,10]
    },

    url : 'php/watermark.php',

    classNoDisplay:             'nodisplay'
};
var Base = (function () {
    var watermakImage;

    var _initModules = function () {
        Images.init();
        ControlPanel.init();
    };

    var _setDefault = function () {
        //TODO set default
    };

    var _loadMainImage = function (image) {
        _hide(); //  скрываем watermark для плавности
        _inputWatermarkEnable();
        Scale.mainImage(image, function(){
            //_positionAdd([0,0]); // обновляем позицию watermark
        });
        if(watermakImage){
            var pos = Position.get();
            Scale.watermark(watermakImage,function(){
                _position(pos);
                _transparency();
            });
        }
    };

    var _loadWaterMark = function (image) {
        _addDragAndDrop();
        Scale.watermark(image);
        watermakImage = image;
        _transparency();
    };

    var _addDragAndDrop = function(){
        $('.watermark-image').draggable({
            stop: function(){
                var pos = Position.get();

                Base.trigger('position:set',pos);
            }
        });
    };

    var _inputWatermarkEnable = function () {
        var
            input = globalParameters.watermarkImageInput,
            wrapper = globalParameters.watermarkImageInputWrapper;

        input.prop('disabled', false);
        wrapper.prop('disabled', false);
    };

    var _transparency = function (percent) {
        Transparency.set(percent);
    };

    var _hide = function(){
        Transparency.hide();
    };

    var _position = function (pos) {
        Position.set(pos);
    };

    var _positionAdd = function (pos) {
        Position.add(pos);
    };

    var _positionChange = function (pos) {
        var position = pos || Position.get();
        Inputs.set(position);
    };

    return {
        init: function () {
            _initModules();
            _setDefault();
        },

        trigger: function (event, params) {
            switch (event) {
                case 'loadMainImage':
                    _loadMainImage(params);
                    break;
                case 'loadWatermark':
                    _loadWaterMark(params);
                    break;
                case 'transparency':
                    _transparency(params);
                    break;
                case 'position:set':
                    _position(params);
                    break;
                case 'position:add':
                    _positionAdd(params);
                    break;
                case 'position:change':
                    _positionChange(params);
                    //TODO inputs change
                    break;
            }
        }
    }
}());
var ControlPanel = (function () {
    var $reset = globalParameters.buttonReset;

    var _initModules = function () {
        Slider.init();
        Spiners.init();
        Inputs.init();
        Grid.init();
    };

    var _eventListener = function () {
        $reset.on('click', _setDefault);
    };

    var _setDefault = function (e) {
        e.preventDefault();

        var
            pos = globalParameters.defaults.position,
            transparency = globalParameters.defaults.transparency;

        Base.trigger('position:set', pos);
        Slider.set(transparency);
    };

    return {
        init: function () {
            _initModules();
            _eventListener();
        }
    }
}());
var Grid = (function () {
    var class_ = globalParameters.gridClass,
        sizeGrid = {
            col:    3,
            row:    3
        };

    var _setSizeGrid = function(size){
        if(size != undefined && size[0] !== undefined)sizeGrid.col = size[0];
        if(size != undefined && size[1] !== undefined)sizeGrid.row = size[1];
    };

    var _eventListener = function () {
        $(class_).on('click', _click);
    };

    var _click = function (e) {
        var index = $(this).index(),
            centerBlockPosition = _getCenterPositionBlockByIndex(index),
            pos = _watermarkCenterByPosition(centerBlockPosition);
        Base.trigger('position:set',pos);
    };

    var _getCenterPositionBlockByIndex = function (index) {
        var size = Images.getSizeMainImage(),
            block = {
                width: parseInt(size.width) / sizeGrid.col,
                height: parseInt(size.height) / sizeGrid.row,
            },
            hCountBlock = index / sizeGrid.col >> 0, // номер блока в столбце
            wCountBlock = index % sizeGrid.col;      // номер блока в строке
        return [
            block.width / 2 + block.width * wCountBlock,
            block.height / 2 + block.height * hCountBlock
        ];
    };

    var _watermarkCenterByPosition = function(pos){
        var size = Images.getSizeWatermark();

        return [
            pos[0] - parseInt(size.width)/2,
            pos[1] - parseInt(size.height)/2
        ]
    };


    return {
        init: function (sizeGrid) {
            _eventListener();
            _setSizeGrid(sizeGrid);
        }
    }
}());

var Images = (function () {
    var
        $image = globalParameters.mainImageInput,
        $imageName = globalParameters.mainImageInputWrapper,

        $watermark = globalParameters.watermarkImageInput,
        $watermarkName = globalParameters.watermarkImageInputWrapper,

        $inputImage1 = globalParameters.mainImageInput,
        $inputImage2 = globalParameters.watermarkImageInput,

        $submit = globalParameters.buttonSubmit;

    var _eventListener = function () {
        $image.on('change', _changeFileUploadImage);
        $watermark.on('change', _changeFileUploadWatermark);

        $inputImage1.on('change', _loadMainImage);
        $inputImage2.on('change', _loadWatermark);

        $submit.on('click', _save);
    };

    var _changeFileUploadImage = function () {
        var filepath = $image.val();

        filepath = filepath.replace(/c:\\fakepath\\/gmi, "");
        $imageName.val(filepath);
    };

    var _changeFileUploadWatermark = function () {
        var filepath = $watermark.val();

        filepath = filepath.replace(/c:\\fakepath\\/gmi, "");
        $watermarkName.val(filepath)
    };

    var _loadImg = function (e, func) {
        if (window.File && window.FileReader && window.FileList && window.Blob) {
            var file = e.target.files[0];

            if (!file.type.match('image.*')) {
                alert('РћС€РёР±РєР°. РўРѕР»СЊРєРѕ РёР·РѕР±СЂР°Р¶РµРЅРёСЏ!');
                //TODO type error message
                return;
            }

            var reader = new FileReader();

            reader.onload = (function (f) {
                return func;
            })(file);

            reader.readAsDataURL(file);
        } else {
            alert('The File APIs are not fully supported in this browser.');
            //TODO  exit message
        }
    };


    var _setBackGround = function (image, $container) {
        var url = 'url(' + image + ')';

        $container.css('background-image', url);

        Base.trigger('loadMainImage',image);
    };

    var _setImage = function (image, $container, class_) {
        var img = document.createElement('img'),
            noDisplay = globalParameters.classNoDisplay;

        $(img)
            .addClass(class_)
            .css('opacity',0)
            .one('load', function () {
                Base.trigger('loadWatermark',image);
            })
            .attr('src', image)
        ;

        $container
            .find('.' + class_)
            .remove(); // СѓРґР°Р»СЏРµРј РїСЂРµРґС‹РґСѓС‰РёРµ watermark

        $container.append(img);

    };

    var _loadMainImage = function (e) {
        _loadImg(e, function (e) {
            var $container = globalParameters.mainContainer,
                image = e.target.result;

            _setBackGround(image, $container);
        });

    };

    var
        _loadWatermark = function (e) {
            _loadImg(e, function (e) {
                var $container = globalParameters.watermarkContainer,
                    class_ = globalParameters.classWatermarkImage,
                    image = e.target.result;

                _setImage(image, $container, class_);
            });
        };

    var _save = function (e) {
        e.preventDefault();
        var fd = new FormData,
            url = globalParameters.url,
            opacity = Slider.get(),
            position = Position.get();

        if ($inputImage1.prop('files').length === 0 || $inputImage2.prop('files').length === 0) {
            alert('РЎРЅР°С‡Р°Р»Р° РІС‹Р±РµСЂРёС‚Рµ РёР·РѕР±СЂР°Р¶РµРЅРёРµ');
            //TODO print message
            return;
        }

        fd.append('img1', $inputImage1.prop('files')[0]);
        fd.append('img2', $inputImage2.prop('files')[0]);
        fd.append('opacity', opacity);
        fd.append('positionX', position[0]);
        fd.append('positionY', position[1]);

        $.ajax({
            url: url,
            data: fd,
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (data) {
                console.log('success');
                console.log(data);

                if(data.status === 'error'){
                    alert(data.message);
                }
            },
            error: function (e) {
                console.log('error');
                console.log(e);
            }
        })
    };

    return {

        init: function () {
            _eventListener();
        },

        getSizeMainImage: function () {
            return Scale.getSizeMainImage();
        },

        getSizeWatermark: function(){
            var $image = $('.' + globalParameters.classWatermarkImage);
            return {
                width: $image.width(),
                height: $image.height()
            }
        }

    }
}());
var Inputs = (function () {
    var
        $x = globalParameters.controlPanel.inputs.$x,
        $y = globalParameters.controlPanel.inputs.$y;

    var _eventListener = function () {

        $x.on('keyup',function(){
            var position = [$x.val()];
            Base.trigger('position:set',position);
        });

        $y.on('keyup',function(){
            var position = [undefined, $y.val()];
            Base.trigger('position:set',position);
        });

    };

    return {

        init: function () {
            this.set([0, 0]);
            _eventListener();
        },

        set: function (position) {
            if(position[0] !== undefined)$x.val(position[0]);
            if(position[1] !== undefined)$y.val(position[1]);
        }

    }
}());
var Position = (function () {
    var
        imageClass = '.' + globalParameters.classWatermarkImage,
        defPosition = globalParameters.defaults.position,
        $container = globalParameters.watermarkContainer;

    var _getBorderPosition = function () {
        var $image = $(imageClass),
            width = $image.width(),
            heigth = $image.height(),
            widthContainer = $container.width(),
            heightContainer = $container.height();

        return [
            widthContainer - width,
            heightContainer - heigth
        ]
    };

    var _validPosition = function (pos) {
        var borders = _getBorderPosition(),
            x = pos[0],
            y = pos[1];

        if (x !== undefined){
            x = parseInt(x);
            x = x > borders[0] ? borders[0] : x;
            x = x > 0 ? x : 0;
        }

        if (y !== undefined){
            y = parseInt(y);
            y = y > borders[1] ? borders[1] : y;
            y = y > 0 ? y : 0;
        }

        return [x, y];
    };

    return {
        setDefault: function () {
            this.set(defPosition[0], defPosition[1]);
        },

        set: function (pos) {
            var
                $image = $(imageClass),
                position = $image.position();
            if (position === undefined) return;

            pos = _validPosition(pos);
            var x = pos[0],
                y = pos[1];

            if (x !== undefined){
                $image.css('left', x);
            }
            if (y !== undefined){
                $image.css('top', y);
            }
            Base.trigger('position:change', pos);
        },

        add: function (pos) {
            var
                $image = $(imageClass),
                addX = pos[0],
                addY = pos[1],
                position = $image.position();

            if (position === undefined) return;

            var
                x = parseInt(position.left),
                y = parseInt(position.top);

            if (addX)x += addX;
            if (addY)y += addY;

            this.set([x, y]);
        },

        get: function () {
            var
                $image = $(imageClass),
                position = $image.position();

            return [position.left,position.top];
        }
    }
}());
var Scale = (function () {
    var
        images = {
            size: {
                original: {
                    width: 0,
                    height: 0
                },

                scale: {
                    width: 0,
                    height: 0
                }
            }
        };

    var setScaleWaterMark = function (image, callback) {
        var $container = globalParameters.watermarkContainer,
            $image = $('.' + globalParameters.classWatermarkImage),
            img = document.createElement('img'),
            noDisplay = globalParameters.classNoDisplay;

        $container.append(img);

        $(img)
            .addClass(noDisplay)
            .one('load', function () {
                var $this = $(this),
                    size = {
                        width: $this.width(),
                        height: $this.height()
                    };

                $this.remove();

                _getSizeWaterMark(image, function (size) {
                    var rate = _getRate();

                    var pos = [
                        $image.css('left'),
                        $image.css('top')
                    ];

                    $image
                        .width(size.width * rate.width)
                        .height(size.height * rate.height);

                    if (callback)callback();
                });
            })
            .attr('src', image);
    };

    var _getRate = function () {
        return {
            height: images.size.scale.height / images.size.original.height,
            width: images.size.scale.width / images.size.original.width
        }
    };

    var _getSizeWaterMark = function (image, callback) {
        var img = document.createElement('img'),
            $container = globalParameters.watermarkContainer;

        $container
            .append(img);

        $(img)
            .one('load', function () {
                var $this = $(this),
                    size = {
                        width: $this.width(),
                        height: $this.height()
                    };

                $this.remove();

                callback(size);
            })
            .attr('src', image);
    };

    var setScaleMainImage = function (image, callback) {

        var $container = globalParameters.mainContainer,
            class_ = globalParameters.classMainImage,
            class_1 = globalParameters.classNoDisplay,
            sizeContainer = {
                width: $container.width(),
                height: $container.height()
            };

        img = document.createElement('img'), // для определения размеров
            img1 = document.createElement('img'); // для определения размеров;

        $container
            .append(img)
            .append(img1);

        $(img1)
            .one('load', function () {

                var $this = $(this);

                images.size.original.width = $this.width();
                images.size.original.height = $this.height();

                $this.remove();

                $(img)
                    .one('load', function () {
                        var $this = $(this),
                            width = $this.width(),
                            height = $this.height();

                        //if(width < sizeContainer.width) width = sizeContainer.width;
                        //else if(height < sizeContainer.height) width = sizeContainer.height;

                        images.size.scale.width = width;
                        images.size.scale.height = height;

                        console.log(sizeContainer);
                        console.log(images);
                        $this.remove();
                        _setScalewatermarkContainer(callback);

                    })
                    .attr('src', image)
                    .addClass(class_);
            })
            .attr('src', image)
            .addClass(class_1);

    };

    var _setScalewatermarkContainer = function (callback) {
        var $watermarkContainer = globalParameters.watermarkContainer,
            $container = globalParameters.mainContainer,
            width = images.size.scale.width,
            height = images.size.scale.height;

        $watermarkContainer
            .css('top', ($container.height() - height) / 2)
            .css('left', ($container.width() - width) / 2)
            .width(width)
            .height(height);

        callback();
    };

    return {
        mainImage: setScaleMainImage,
        watermark: setScaleWaterMark,

        getSizeMainImage: function () {
            return images.size.scale;
        }
    }
}());
var Slider = (function () {
    var $slider;

    var _initPlugin = function () {
        $slider = $(".opacity__slider");

        $slider.slider({
            range: "min",
            value: globalParameters.defaults.transparency,
            min: 1,
            change: _change,
            max: 100,
            slide: function (event, ui) {
                $("#amount").val("$" + ui.value);
            }
        });
    };

    var _change = function (e, slider) {
        Base.trigger('transparency', slider.value)
    };

    return {
        init: function () {
            _initPlugin();
        },

        set: function (val) {
            $slider.slider('value', val);
        },

        get: function(){
            return $slider.slider('value');
        }
    }
}());
var Spiners = (function () {
    var
        $xu = globalParameters.controlPanel.spiners.$xu,
        $xd = globalParameters.controlPanel.spiners.$xd,
        $yu = globalParameters.controlPanel.spiners.$yu,
        $yd = globalParameters.controlPanel.spiners.$yd
        ;

    var _eventListener = function () {

        $xu.on('click', function(){
            Base.trigger('position:add', [1, 0]);

        });

        $xd.on('click', function(){
            Base.trigger('position:add', [-1, 0]);

        });

        $yu.on('click', function(){
            Base.trigger('position:add', [0, 1]);

        });

        $yd.on('click', function(){
            Base.trigger('position:add', [0, -1]);

        });
    };

    return {
        init: function () {
            _eventListener();
        }
    }
}());
var Transparency = (function () {
    var lastPercent = globalParameters.defaults.transparency;

    var setTransparency = function (percent) {
        if (percent === undefined)percent = lastPercent;

        var $image = $('.' + globalParameters.classWatermarkImage),
            opacity = percent / 100;

        $image.css('opacity',opacity);

        lastPercent = percent;
    };

    return {
        set: setTransparency,

        hide: function(){
            var opacity = lastPercent;
            setTransparency(0);
            lastPercent = opacity;
        }
    }
}());

// opacity slider
$(function () {

    Base.init();

});

